import cv2
import numpy as np

def remove_rain(frame):
    # Convert the image to grayscale
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    
    # Apply a temporal median filter to reduce noise (simulate removing rain streaks)
    blur = cv2.medianBlur(gray, 3)
    
    # Thresholding to highlight rain streaks
    _, thresh = cv2.threshold(blur, 200, 255, cv2.THRESH_BINARY)
    
    # Use morphological operations to remove rain streaks
    kernel = np.ones((3, 3), np.uint8)
    rain_removed = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel)
    
    # Subtract rain streaks from the original frame
    result = cv2.inpaint(frame, rain_removed, 7, cv2.INPAINT_TELEA)
    return result

def remove_fog(frame):
    # Convert image to YCrCb color space
    ycrcb = cv2.cvtColor(frame, cv2.COLOR_BGR2YCrCb)
    
    # Split the channels
    y, cr, cb = cv2.split(ycrcb)
    
    # Apply histogram equalization on the Y channel (intensity channel)
    y_eq = cv2.equalizeHist(y)
    
    # Merge the channels back
    ycrcb_eq = cv2.merge((y_eq, cr, cb))
    
    # Convert back to BGR color space
    result = cv2.cvtColor(ycrcb_eq, cv2.COLOR_YCrCb2BGR)
    return result

def process_frame(frame):
    # Apply rain removal
    derained_frame = remove_rain(frame)
    
    # Apply fog removal
    defogged_frame = remove_fog(derained_frame)
    
    return defogged_frame

# Capture video from the webcam or any other video source
cap = cv2.VideoCapture(0)  # Use '0' for the default webcam

while True:
    ret, frame = cap.read()
    if not ret:
        break
    
    # Process each frame
    processed_frame = process_frame(frame)
    
    # Display the processed frame
    cv2.imshow('Processed Feed - Rain and Fog Removal', processed_frame)
    
    # Press 'q' to exit
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the capture and close all OpenCV windows
cap.release()
cv2.destroyAllWindows()
